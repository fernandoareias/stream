package com.fernando.events; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CreditCardCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3169524539393076576L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CreditCardCreatedEvent\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"cardnumber\",\"type\":\"string\"},{\"name\":\"portadordocument\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CreditCardCreatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CreditCardCreatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CreditCardCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CreditCardCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CreditCardCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CreditCardCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CreditCardCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CreditCardCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CreditCardCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence key;
  private java.lang.CharSequence cardnumber;
  private java.lang.CharSequence portadordocument;
  private java.lang.CharSequence status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CreditCardCreatedEvent() {}

  /**
   * All-args constructor.
   * @param key The new value for key
   * @param cardnumber The new value for cardnumber
   * @param portadordocument The new value for portadordocument
   * @param status The new value for status
   */
  public CreditCardCreatedEvent(java.lang.CharSequence key, java.lang.CharSequence cardnumber, java.lang.CharSequence portadordocument, java.lang.CharSequence status) {
    this.key = key;
    this.cardnumber = cardnumber;
    this.portadordocument = portadordocument;
    this.status = status;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return cardnumber;
    case 2: return portadordocument;
    case 3: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.CharSequence)value$; break;
    case 1: cardnumber = (java.lang.CharSequence)value$; break;
    case 2: portadordocument = (java.lang.CharSequence)value$; break;
    case 3: status = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.CharSequence getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'cardnumber' field.
   * @return The value of the 'cardnumber' field.
   */
  public java.lang.CharSequence getCardnumber() {
    return cardnumber;
  }


  /**
   * Sets the value of the 'cardnumber' field.
   * @param value the value to set.
   */
  public void setCardnumber(java.lang.CharSequence value) {
    this.cardnumber = value;
  }

  /**
   * Gets the value of the 'portadordocument' field.
   * @return The value of the 'portadordocument' field.
   */
  public java.lang.CharSequence getPortadordocument() {
    return portadordocument;
  }


  /**
   * Sets the value of the 'portadordocument' field.
   * @param value the value to set.
   */
  public void setPortadordocument(java.lang.CharSequence value) {
    this.portadordocument = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }


  /**
   * Creates a new CreditCardCreatedEvent RecordBuilder.
   * @return A new CreditCardCreatedEvent RecordBuilder
   */
  public static CreditCardCreatedEvent.Builder newBuilder() {
    return new CreditCardCreatedEvent.Builder();
  }

  /**
   * Creates a new CreditCardCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CreditCardCreatedEvent RecordBuilder
   */
  public static CreditCardCreatedEvent.Builder newBuilder(CreditCardCreatedEvent.Builder other) {
    if (other == null) {
      return new CreditCardCreatedEvent.Builder();
    } else {
      return new CreditCardCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new CreditCardCreatedEvent RecordBuilder by copying an existing CreditCardCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new CreditCardCreatedEvent RecordBuilder
   */
  public static CreditCardCreatedEvent.Builder newBuilder(CreditCardCreatedEvent other) {
    if (other == null) {
      return new CreditCardCreatedEvent.Builder();
    } else {
      return new CreditCardCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CreditCardCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CreditCardCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<CreditCardCreatedEvent> {

    private java.lang.CharSequence key;
    private java.lang.CharSequence cardnumber;
    private java.lang.CharSequence portadordocument;
    private java.lang.CharSequence status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(CreditCardCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.cardnumber)) {
        this.cardnumber = data().deepCopy(fields()[1].schema(), other.cardnumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.portadordocument)) {
        this.portadordocument = data().deepCopy(fields()[2].schema(), other.portadordocument);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing CreditCardCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(CreditCardCreatedEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cardnumber)) {
        this.cardnumber = data().deepCopy(fields()[1].schema(), other.cardnumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.portadordocument)) {
        this.portadordocument = data().deepCopy(fields()[2].schema(), other.portadordocument);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.CharSequence getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardnumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardnumber() {
      return cardnumber;
    }


    /**
      * Sets the value of the 'cardnumber' field.
      * @param value The value of 'cardnumber'.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder setCardnumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cardnumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cardnumber' field has been set.
      * @return True if the 'cardnumber' field has been set, false otherwise.
      */
    public boolean hasCardnumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cardnumber' field.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder clearCardnumber() {
      cardnumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'portadordocument' field.
      * @return The value.
      */
    public java.lang.CharSequence getPortadordocument() {
      return portadordocument;
    }


    /**
      * Sets the value of the 'portadordocument' field.
      * @param value The value of 'portadordocument'.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder setPortadordocument(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.portadordocument = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'portadordocument' field has been set.
      * @return True if the 'portadordocument' field has been set, false otherwise.
      */
    public boolean hasPortadordocument() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'portadordocument' field.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder clearPortadordocument() {
      portadordocument = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public CreditCardCreatedEvent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }


    @Override
    @SuppressWarnings("unchecked")
    public CreditCardCreatedEvent build() {
      try {
        CreditCardCreatedEvent record = new CreditCardCreatedEvent();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cardnumber = fieldSetFlags()[1] ? this.cardnumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.portadordocument = fieldSetFlags()[2] ? this.portadordocument : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CreditCardCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CreditCardCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CreditCardCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<CreditCardCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.key);

    out.writeString(this.cardnumber);

    out.writeString(this.portadordocument);

    out.writeString(this.status);


  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);

      this.cardnumber = in.readString(this.cardnumber instanceof Utf8 ? (Utf8)this.cardnumber : null);

      this.portadordocument = in.readString(this.portadordocument instanceof Utf8 ? (Utf8)this.portadordocument : null);

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);


    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);
          break;

        case 1:
          this.cardnumber = in.readString(this.cardnumber instanceof Utf8 ? (Utf8)this.cardnumber : null);
          break;

        case 2:
          this.portadordocument = in.readString(this.portadordocument instanceof Utf8 ? (Utf8)this.portadordocument : null);
          break;

        case 3:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }

  @org.apache.avro.specific.AvroGenerated
  public static class ClientCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -3959963720032071188L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClientCreatedEvent\",\"namespace\":\"com.fernando\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"cardNumber\",\"type\":\"string\"},{\"name\":\"proposalNumber\",\"type\":\"string\"},{\"name\":\"document\",\"type\":\"string\"},{\"name\":\"product\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<ClientCreatedEvent> ENCODER =
        new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<ClientCreatedEvent> DECODER =
        new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<ClientCreatedEvent> getEncoder() {
      return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<ClientCreatedEvent> getDecoder() {
      return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<ClientCreatedEvent> createDecoder(SchemaStore resolver) {
      return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this ClientCreatedEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
      return ENCODER.encode(this);
    }

    /**
     * Deserializes a ClientCreatedEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a ClientCreatedEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static ClientCreatedEvent fromByteBuffer(
        java.nio.ByteBuffer b) throws java.io.IOException {
      return DECODER.decode(b);
    }

    private CharSequence key;
    private CharSequence cardNumber;
    private CharSequence proposalNumber;
    private CharSequence document;
    private CharSequence product;
    private CharSequence status;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public ClientCreatedEvent() {}

    /**
     * All-args constructor.
     * @param key The new value for key
     * @param cardNumber The new value for cardNumber
     * @param proposalNumber The new value for proposalNumber
     * @param document The new value for document
     * @param product The new value for product
     * @param status The new value for status
     */
    public ClientCreatedEvent(CharSequence key, CharSequence cardNumber, CharSequence proposalNumber, CharSequence document, CharSequence product, CharSequence status) {
      this.key = key;
      this.cardNumber = cardNumber;
      this.proposalNumber = proposalNumber;
      this.document = document;
      this.product = product;
      this.status = status;
    }

    @Override
    public SpecificData getSpecificData() { return MODEL$; }

    @Override
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
      switch (field$) {
      case 0: return key;
      case 1: return cardNumber;
      case 2: return proposalNumber;
      case 3: return document;
      case 4: return product;
      case 5: return status;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
      }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value="unchecked")
    public void put(int field$, Object value$) {
      switch (field$) {
      case 0: key = (CharSequence)value$; break;
      case 1: cardNumber = (CharSequence)value$; break;
      case 2: proposalNumber = (CharSequence)value$; break;
      case 3: document = (CharSequence)value$; break;
      case 4: product = (CharSequence)value$; break;
      case 5: status = (CharSequence)value$; break;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
      }
    }

    /**
     * Gets the value of the 'key' field.
     * @return The value of the 'key' field.
     */
    public CharSequence getKey() {
      return key;
    }


    /**
     * Sets the value of the 'key' field.
     * @param value the value to set.
     */
    public void setKey(CharSequence value) {
      this.key = value;
    }

    /**
     * Gets the value of the 'cardNumber' field.
     * @return The value of the 'cardNumber' field.
     */
    public CharSequence getCardNumber() {
      return cardNumber;
    }


    /**
     * Sets the value of the 'cardNumber' field.
     * @param value the value to set.
     */
    public void setCardNumber(CharSequence value) {
      this.cardNumber = value;
    }

    /**
     * Gets the value of the 'proposalNumber' field.
     * @return The value of the 'proposalNumber' field.
     */
    public CharSequence getProposalNumber() {
      return proposalNumber;
    }


    /**
     * Sets the value of the 'proposalNumber' field.
     * @param value the value to set.
     */
    public void setProposalNumber(CharSequence value) {
      this.proposalNumber = value;
    }

    /**
     * Gets the value of the 'document' field.
     * @return The value of the 'document' field.
     */
    public CharSequence getDocument() {
      return document;
    }


    /**
     * Sets the value of the 'document' field.
     * @param value the value to set.
     */
    public void setDocument(CharSequence value) {
      this.document = value;
    }

    /**
     * Gets the value of the 'product' field.
     * @return The value of the 'product' field.
     */
    public CharSequence getProduct() {
      return product;
    }


    /**
     * Sets the value of the 'product' field.
     * @param value the value to set.
     */
    public void setProduct(CharSequence value) {
      this.product = value;
    }

    /**
     * Gets the value of the 'status' field.
     * @return The value of the 'status' field.
     */
    public CharSequence getStatus() {
      return status;
    }


    /**
     * Sets the value of the 'status' field.
     * @param value the value to set.
     */
    public void setStatus(CharSequence value) {
      this.status = value;
    }

    /**
     * Creates a new ClientCreatedEvent RecordBuilder.
     * @return A new ClientCreatedEvent RecordBuilder
     */
    public static Builder newBuilder() {
      return new Builder();
    }

    /**
     * Creates a new ClientCreatedEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new ClientCreatedEvent RecordBuilder
     */
    public static Builder newBuilder(Builder other) {
      if (other == null) {
        return new Builder();
      } else {
        return new Builder(other);
      }
    }

    /**
     * Creates a new ClientCreatedEvent RecordBuilder by copying an existing ClientCreatedEvent instance.
     * @param other The existing instance to copy.
     * @return A new ClientCreatedEvent RecordBuilder
     */
    public static Builder newBuilder(ClientCreatedEvent other) {
      if (other == null) {
        return new Builder();
      } else {
        return new Builder(other);
      }
    }

    /**
     * RecordBuilder for ClientCreatedEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClientCreatedEvent>
      implements org.apache.avro.data.RecordBuilder<ClientCreatedEvent> {

      private CharSequence key;
      private CharSequence cardNumber;
      private CharSequence proposalNumber;
      private CharSequence document;
      private CharSequence product;
      private CharSequence status;

      /** Creates a new Builder */
      private Builder() {
        super(SCHEMA$, MODEL$);
      }

      /**
       * Creates a Builder by copying an existing Builder.
       * @param other The existing Builder to copy.
       */
      private Builder(Builder other) {
        super(other);
        if (isValidValue(fields()[0], other.key)) {
          this.key = data().deepCopy(fields()[0].schema(), other.key);
          fieldSetFlags()[0] = other.fieldSetFlags()[0];
        }
        if (isValidValue(fields()[1], other.cardNumber)) {
          this.cardNumber = data().deepCopy(fields()[1].schema(), other.cardNumber);
          fieldSetFlags()[1] = other.fieldSetFlags()[1];
        }
        if (isValidValue(fields()[2], other.proposalNumber)) {
          this.proposalNumber = data().deepCopy(fields()[2].schema(), other.proposalNumber);
          fieldSetFlags()[2] = other.fieldSetFlags()[2];
        }
        if (isValidValue(fields()[3], other.document)) {
          this.document = data().deepCopy(fields()[3].schema(), other.document);
          fieldSetFlags()[3] = other.fieldSetFlags()[3];
        }
        if (isValidValue(fields()[4], other.product)) {
          this.product = data().deepCopy(fields()[4].schema(), other.product);
          fieldSetFlags()[4] = other.fieldSetFlags()[4];
        }
        if (isValidValue(fields()[5], other.status)) {
          this.status = data().deepCopy(fields()[5].schema(), other.status);
          fieldSetFlags()[5] = other.fieldSetFlags()[5];
        }
      }

      /**
       * Creates a Builder by copying an existing ClientCreatedEvent instance
       * @param other The existing instance to copy.
       */
      private Builder(ClientCreatedEvent other) {
        super(SCHEMA$, MODEL$);
        if (isValidValue(fields()[0], other.key)) {
          this.key = data().deepCopy(fields()[0].schema(), other.key);
          fieldSetFlags()[0] = true;
        }
        if (isValidValue(fields()[1], other.cardNumber)) {
          this.cardNumber = data().deepCopy(fields()[1].schema(), other.cardNumber);
          fieldSetFlags()[1] = true;
        }
        if (isValidValue(fields()[2], other.proposalNumber)) {
          this.proposalNumber = data().deepCopy(fields()[2].schema(), other.proposalNumber);
          fieldSetFlags()[2] = true;
        }
        if (isValidValue(fields()[3], other.document)) {
          this.document = data().deepCopy(fields()[3].schema(), other.document);
          fieldSetFlags()[3] = true;
        }
        if (isValidValue(fields()[4], other.product)) {
          this.product = data().deepCopy(fields()[4].schema(), other.product);
          fieldSetFlags()[4] = true;
        }
        if (isValidValue(fields()[5], other.status)) {
          this.status = data().deepCopy(fields()[5].schema(), other.status);
          fieldSetFlags()[5] = true;
        }
      }

      /**
        * Gets the value of the 'key' field.
        * @return The value.
        */
      public CharSequence getKey() {
        return key;
      }


      /**
        * Sets the value of the 'key' field.
        * @param value The value of 'key'.
        * @return This builder.
        */
      public Builder setKey(CharSequence value) {
        validate(fields()[0], value);
        this.key = value;
        fieldSetFlags()[0] = true;
        return this;
      }

      /**
        * Checks whether the 'key' field has been set.
        * @return True if the 'key' field has been set, false otherwise.
        */
      public boolean hasKey() {
        return fieldSetFlags()[0];
      }


      /**
        * Clears the value of the 'key' field.
        * @return This builder.
        */
      public Builder clearKey() {
        key = null;
        fieldSetFlags()[0] = false;
        return this;
      }

      /**
        * Gets the value of the 'cardNumber' field.
        * @return The value.
        */
      public CharSequence getCardNumber() {
        return cardNumber;
      }


      /**
        * Sets the value of the 'cardNumber' field.
        * @param value The value of 'cardNumber'.
        * @return This builder.
        */
      public Builder setCardNumber(CharSequence value) {
        validate(fields()[1], value);
        this.cardNumber = value;
        fieldSetFlags()[1] = true;
        return this;
      }

      /**
        * Checks whether the 'cardNumber' field has been set.
        * @return True if the 'cardNumber' field has been set, false otherwise.
        */
      public boolean hasCardNumber() {
        return fieldSetFlags()[1];
      }


      /**
        * Clears the value of the 'cardNumber' field.
        * @return This builder.
        */
      public Builder clearCardNumber() {
        cardNumber = null;
        fieldSetFlags()[1] = false;
        return this;
      }

      /**
        * Gets the value of the 'proposalNumber' field.
        * @return The value.
        */
      public CharSequence getProposalNumber() {
        return proposalNumber;
      }


      /**
        * Sets the value of the 'proposalNumber' field.
        * @param value The value of 'proposalNumber'.
        * @return This builder.
        */
      public Builder setProposalNumber(CharSequence value) {
        validate(fields()[2], value);
        this.proposalNumber = value;
        fieldSetFlags()[2] = true;
        return this;
      }

      /**
        * Checks whether the 'proposalNumber' field has been set.
        * @return True if the 'proposalNumber' field has been set, false otherwise.
        */
      public boolean hasProposalNumber() {
        return fieldSetFlags()[2];
      }


      /**
        * Clears the value of the 'proposalNumber' field.
        * @return This builder.
        */
      public Builder clearProposalNumber() {
        proposalNumber = null;
        fieldSetFlags()[2] = false;
        return this;
      }

      /**
        * Gets the value of the 'document' field.
        * @return The value.
        */
      public CharSequence getDocument() {
        return document;
      }


      /**
        * Sets the value of the 'document' field.
        * @param value The value of 'document'.
        * @return This builder.
        */
      public Builder setDocument(CharSequence value) {
        validate(fields()[3], value);
        this.document = value;
        fieldSetFlags()[3] = true;
        return this;
      }

      /**
        * Checks whether the 'document' field has been set.
        * @return True if the 'document' field has been set, false otherwise.
        */
      public boolean hasDocument() {
        return fieldSetFlags()[3];
      }


      /**
        * Clears the value of the 'document' field.
        * @return This builder.
        */
      public Builder clearDocument() {
        document = null;
        fieldSetFlags()[3] = false;
        return this;
      }

      /**
        * Gets the value of the 'product' field.
        * @return The value.
        */
      public CharSequence getProduct() {
        return product;
      }


      /**
        * Sets the value of the 'product' field.
        * @param value The value of 'product'.
        * @return This builder.
        */
      public Builder setProduct(CharSequence value) {
        validate(fields()[4], value);
        this.product = value;
        fieldSetFlags()[4] = true;
        return this;
      }

      /**
        * Checks whether the 'product' field has been set.
        * @return True if the 'product' field has been set, false otherwise.
        */
      public boolean hasProduct() {
        return fieldSetFlags()[4];
      }


      /**
        * Clears the value of the 'product' field.
        * @return This builder.
        */
      public Builder clearProduct() {
        product = null;
        fieldSetFlags()[4] = false;
        return this;
      }

      /**
        * Gets the value of the 'status' field.
        * @return The value.
        */
      public CharSequence getStatus() {
        return status;
      }


      /**
        * Sets the value of the 'status' field.
        * @param value The value of 'status'.
        * @return This builder.
        */
      public Builder setStatus(CharSequence value) {
        validate(fields()[5], value);
        this.status = value;
        fieldSetFlags()[5] = true;
        return this;
      }

      /**
        * Checks whether the 'status' field has been set.
        * @return True if the 'status' field has been set, false otherwise.
        */
      public boolean hasStatus() {
        return fieldSetFlags()[5];
      }


      /**
        * Clears the value of the 'status' field.
        * @return This builder.
        */
      public Builder clearStatus() {
        status = null;
        fieldSetFlags()[5] = false;
        return this;
      }

      @Override
      @SuppressWarnings("unchecked")
      public ClientCreatedEvent build() {
        try {
          ClientCreatedEvent record = new ClientCreatedEvent();
          record.key = fieldSetFlags()[0] ? this.key : (CharSequence) defaultValue(fields()[0]);
          record.cardNumber = fieldSetFlags()[1] ? this.cardNumber : (CharSequence) defaultValue(fields()[1]);
          record.proposalNumber = fieldSetFlags()[2] ? this.proposalNumber : (CharSequence) defaultValue(fields()[2]);
          record.document = fieldSetFlags()[3] ? this.document : (CharSequence) defaultValue(fields()[3]);
          record.product = fieldSetFlags()[4] ? this.product : (CharSequence) defaultValue(fields()[4]);
          record.status = fieldSetFlags()[5] ? this.status : (CharSequence) defaultValue(fields()[5]);
          return record;
        } catch (org.apache.avro.AvroMissingFieldException e) {
          throw e;
        } catch (Exception e) {
          throw new org.apache.avro.AvroRuntimeException(e);
        }
      }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<ClientCreatedEvent>
      WRITER$ = (org.apache.avro.io.DatumWriter<ClientCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
      WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<ClientCreatedEvent>
      READER$ = (org.apache.avro.io.DatumReader<ClientCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
      READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override protected boolean hasCustomCoders() { return true; }

    @Override public void customEncode(org.apache.avro.io.Encoder out)
      throws java.io.IOException
    {
      out.writeString(this.key);

      out.writeString(this.cardNumber);

      out.writeString(this.proposalNumber);

      out.writeString(this.document);

      out.writeString(this.product);

      out.writeString(this.status);

    }

    @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
      throws java.io.IOException
    {
      org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
      if (fieldOrder == null) {
        this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);

        this.cardNumber = in.readString(this.cardNumber instanceof Utf8 ? (Utf8)this.cardNumber : null);

        this.proposalNumber = in.readString(this.proposalNumber instanceof Utf8 ? (Utf8)this.proposalNumber : null);

        this.document = in.readString(this.document instanceof Utf8 ? (Utf8)this.document : null);

        this.product = in.readString(this.product instanceof Utf8 ? (Utf8)this.product : null);

        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      } else {
        for (int i = 0; i < 6; i++) {
          switch (fieldOrder[i].pos()) {
          case 0:
            this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);
            break;

          case 1:
            this.cardNumber = in.readString(this.cardNumber instanceof Utf8 ? (Utf8)this.cardNumber : null);
            break;

          case 2:
            this.proposalNumber = in.readString(this.proposalNumber instanceof Utf8 ? (Utf8)this.proposalNumber : null);
            break;

          case 3:
            this.document = in.readString(this.document instanceof Utf8 ? (Utf8)this.document : null);
            break;

          case 4:
            this.product = in.readString(this.product instanceof Utf8 ? (Utf8)this.product : null);
            break;

          case 5:
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
          }
        }
      }
    }
  }
}










